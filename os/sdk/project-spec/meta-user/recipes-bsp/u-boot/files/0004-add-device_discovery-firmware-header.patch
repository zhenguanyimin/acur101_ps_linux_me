diff -uprN git_std/cmd/net.c git/cmd/net.c
--- git_std/cmd/net.c	2023-05-05 13:39:17.868299594 +0800
+++ git/cmd/net.c	2023-05-05 13:39:52.728781028 +0800
@@ -540,12 +540,9 @@ U_BOOT_CMD(
 );
 #endif // CONFIG_DM_ETH
 
-#if 1
 static int do_OTA(struct cmd_tbl *cmdtp, int flag, int argc, char *const argv[])
 {
 	return netboot_common(OTA, cmdtp, argc, argv);
-
-	return 0;
 }
 
 
@@ -556,5 +553,17 @@ U_BOOT_CMD(
 	"    - donwload  OTA package form port8060'"
 
 );
-#endif
+
+static int do_device_discovery(struct cmd_tbl *cmdtp, int flag, int argc, char *const argv[])
+{
+	return netboot_common(DEVICE_DISCOVERY, cmdtp, argc, argv);
+}
+
+
+U_BOOT_CMD(
+	device_discovery, 1, 1, do_device_discovery,
+	"device_discovery",
+	"recvice UDP broadcase and setup TCP channel to server\n"
+);
+
 
diff -uprN git_std/device_discovery/device_discovery.c git/device_discovery/device_discovery.c
--- git_std/device_discovery/device_discovery.c	1970-01-01 08:00:00.000000000 +0800
+++ git/device_discovery/device_discovery.c	2023-05-05 13:39:59.324872473 +0800
@@ -0,0 +1,310 @@
+/**
+ * OTA base on TCP and alink
+ *
+ **/
+#include <stdio.h>
+#include <stdint.h>
+
+#include "net.h"
+#include "fs.h"
+
+#include "../OTA/OTA_common.h"
+#include "../OTA/alink/alink.h"
+#include "../OTA/alink/alink_recv/alink_recv.h"
+
+#include "../OTA/tcp_client/tcp_client.h"
+#include "../OTA/boot_image/firmware.h"
+
+static alink_recv_info_t sAlinkTcpRecv;
+
+enum 
+{
+	DEVICES_DISCOVERY_STAT_WAIT_CONNECT = 1,
+	DEVICES_DISCOVERY_STAT_CONNECTED = 2,
+};
+static int state = DEVICES_DISCOVERY_STAT_WAIT_CONNECT;
+
+extern ret_code_t alink_handler( alink_msg_t *psMsg, ret_code_t (*pe_send)(uint8_t *pbyData, uint32_t uLen), uint32_t uOutTimeMs );
+
+
+#define DEVICE_INFO_FILE_NAME "firmware-header"
+#define DEVICE_SN_FILE_NAME "sn"
+#define DEVICE_INFO_SET_FS_TYPE()  fs_set_blk_dev("mmc", "0:1", FS_TYPE_FAT)
+
+static int get_sn(uint8_t sn[32])
+{
+	int ret;
+	loff_t len;
+
+	DEVICE_INFO_SET_FS_TYPE();
+	ret = fs_read( DEVICE_SN_FILE_NAME, (ulong)sn, 0, 32 , &len);
+	if (ret <= 0)
+	{
+		return -1;
+	}
+
+	return (int)len;
+}
+
+static void get_device_info(uint8_t compay[32], uint8_t device_name[32], uint8_t device_version[64])
+{
+	firmware_header_t header;
+	int iRet;
+	loff_t len;
+	int size;
+
+	DEVICE_INFO_SET_FS_TYPE();
+	iRet = fs_read( DEVICE_INFO_FILE_NAME, (ulong)&header, 0, sizeof(header) , &len);
+	if ((iRet > 0) && (len == sizeof(header)))
+	{
+		if (compay)
+		{
+			size = (header.corpInfoLen > 32)?32:header.corpInfoLen; 
+			memcpy(compay, header.corpInfo, size);
+		}
+
+		if (device_name)
+		{
+			size = (header.devNameLen > 32)?32:header.devNameLen; 
+			memcpy(device_name, header.devName, size);
+		}
+
+		if (device_version)
+		{
+			size = (header.fwVersionLen > 64)?64:header.fwVersionLen; 
+			memcpy(device_version, header.fwVersion, size);
+		}
+	}
+}
+
+#pragma pack(1)
+typedef struct 
+{
+	uint32_t protocol;
+	uint8_t sn[32];
+}udp_broadcase_request_t;
+#pragma pack()
+
+#pragma pack(1)
+typedef struct 
+{
+	uint32_t protocol;
+	uint8_t sn[32];
+	uint16_t type;
+	uint16_t status;
+	uint8_t version[64];
+}udp_broadcase_device_info_t;
+#pragma pack()
+
+#pragma pack(1)
+typedef struct 
+{
+	uint8_t sn[32];
+	uint32_t IP;
+	uint16_t port;
+	uint16_t type;
+}tcp_connect_info_t;
+#pragma pack()
+
+static udp_broadcase_device_info_t device_info;
+
+
+void (*udp_broadcase_rcv_cb_f)( uint8_t *, uint32_t ) = NULL;
+
+#define UDP_BROADCASE_TIMEOUT (1000*60*1)
+#define UDP_BROADCASE_PORT (1800)
+#define UDP_BROADCASE_SEND_DEVICE_INFO_PORT (1810)
+
+#define ALINK_PROTOCOL_VERSION (0)
+
+#define UDP_BROADCASE_RESPON_CMD (0xBB)
+
+
+
+/**
+ * random_port() - make port a little random (1024-17407)
+ *
+ * Return: random port number from 1024 to 17407
+ *
+ * This keeps the math somewhat trivial to compute, and seems to work with
+ * all supported protocols/clients/servers
+ */
+static unsigned int random_port(void)
+{
+	#define RANDOM_PORT_START 1024
+	#define RANDOM_PORT_RANGE 0x4000
+
+	return RANDOM_PORT_START + (get_timer(0) % RANDOM_PORT_RANGE);
+}
+
+
+static void udp_broadcase_timeout_handler(void)
+{
+	printf("timeout fail\n");
+	net_set_state(NETLOOP_FAIL);
+}
+
+static int udp_broadcase_send_data(int src_port, int dest_port, void *data, int len)
+{
+	uchar *pkt, *iphdr;
+	int pktlen, iplen;
+	int eth_hdr_size;
+	struct in_addr bcast_ip;
+
+	pkt = net_tx_packet;
+	memset((void *)pkt, 0, PKTSIZE);
+
+	eth_hdr_size = net_set_ether(pkt, net_bcast_ethaddr, PROT_IP);
+	pkt += eth_hdr_size;
+
+	iphdr = pkt;	/* We'll need this later to set proper pkt size */
+	pkt += IP_UDP_HDR_SIZE;
+
+	memcpy(pkt, data, len);
+	pkt += len;
+
+	iplen = len;
+	pktlen = eth_hdr_size + IP_UDP_HDR_SIZE + iplen;
+	bcast_ip.s_addr = 0xFFFFFFFFL;
+	net_set_udp_header(iphdr, bcast_ip, dest_port, src_port, iplen);
+
+	printf("Transmitting UDP broadcase packet: len = %d\n", pktlen);
+	net_send_packet(net_tx_packet, pktlen);
+
+	return 0;
+}
+
+static void udp_broadcase_send_device_info(void)
+{
+	static alink_msg_t Ack;
+	int len;
+
+	memcpy(Ack.buffer, &device_info, sizeof(device_info));
+	len = alink_pkg_first(&Ack, sizeof(device_info), UDP_BROADCASE_RESPON_CMD); 
+
+	udp_broadcase_send_data(random_port(),UDP_BROADCASE_SEND_DEVICE_INFO_PORT, &Ack, len);
+	
+	net_set_timeout_handler(UDP_BROADCASE_TIMEOUT, udp_broadcase_timeout_handler);
+}
+
+
+static void udp_broadcase_handler(uchar *pkt, unsigned dest, struct in_addr sip,
+			 unsigned src, unsigned len)
+{
+	printf("src ip:%pI4\n", &sip);
+	printf("dest port:%d, src:%d,len:%d\n", dest, src, len);
+
+	if (udp_broadcase_rcv_cb_f)
+	{
+		udp_broadcase_rcv_cb_f(pkt, len);
+	}
+
+	if (DEVICES_DISCOVERY_STAT_CONNECTED == state)
+	{
+		net_set_timeout_handler(0, (thand_f *)0);
+		printf("got udp finish\n");
+		net_set_state(NETLOOP_SUCCESS);
+	}
+}
+
+			 
+//cmd=0xBC
+ret_code_t udp_broadcase_got_data( alink_msg_t *msg, alink_ans_t *resp )
+{
+	tcp_connect_info_t *p = (tcp_connect_info_t *)msg->buffer;
+	uint8_t sn[32] = {0};
+	int ret;
+
+	printf("got broadcase msg\n");
+	
+	memset(sn, 0, sizeof(sn));
+	ret = get_sn(sn); 
+	if ((ret > 0) && (strcmp(sn, p->sn)))
+	{
+		return RET_INVALID_PARAM;
+	}
+
+	memcpy(&net_server_ip, &p->IP, 4);
+	net_server_tcp_port = p->port;
+
+	printf("broadcase tcp:%pI4::%d\n", &net_server_ip, net_server_tcp_port);
+	state = DEVICES_DISCOVERY_STAT_CONNECTED;
+
+	return RET_OK;
+}
+
+//cmd=0xBA
+ret_code_t udp_broadcase_request_cmd( alink_msg_t *msg, alink_ans_t *resp )
+{
+	int index = 0;
+	udp_broadcase_request_t *p = (udp_broadcase_request_t *)msg->buffer;
+	uint8_t sn[32] = {0};
+	uint8_t version[64];
+	int ret;
+
+	printf("got broadcase request msg\n");
+	
+	memset(sn, 0, sizeof(sn));
+	ret = get_sn(sn); /* we has no SN */
+	if ('\0' != p->sn[0])
+	{
+		if (ret <= 0)
+		{
+			return RET_NO_RESOURCE;
+		}
+
+		if (strcmp(sn, p->sn))
+		{
+			return RET_NO_RESOURCE;
+		}
+	}
+
+	if (p->protocol < ALINK_PROTOCOL_VERSION)
+	{
+		printf("no supported protocol, the sever protocol is too low.my protocol version is:%d\n", ALINK_PROTOCOL_VERSION);
+		return RET_NOT_SUPPORT;
+	}
+
+	get_device_info(NULL, NULL, version);
+
+	device_info.protocol = ALINK_PROTOCOL_VERSION;
+	if ('\0' == sn[0]) strcpy(device_info.sn, "N/A");
+	else memcpy(device_info.sn, sn, sizeof(device_info.sn));
+	device_info.type = ALINK_DEV_ID_RADAR;
+	device_info.status = state;
+	memcpy(device_info.version, version, sizeof(device_info.version));
+
+	net_set_timeout_handler(1, udp_broadcase_send_device_info);
+
+	return RET_OK;
+}
+
+static void  udp_broadcase_register_recv_cb(void (*f)( uint8_t *, uint32_t ))
+{
+	udp_broadcase_rcv_cb_f = f;
+}
+
+static void alink_udp_handler( uint8_t *pbyData, uint32_t uLen )
+{
+	alink_handler( (alink_msg_t*)(pbyData), NULL, 0xFFFFFFFF );
+}
+
+static void alink_udp_recv( uint8_t *pbyData, uint32_t uLen )
+{
+	alink_recv_data( &sAlinkTcpRecv, pbyData, uLen );
+}
+
+
+void device_discovery_start( void )
+{
+	state = DEVICES_DISCOVERY_STAT_WAIT_CONNECT;
+
+	alink_init();
+	alink_recv_init( &sAlinkTcpRecv, alink_udp_handler );
+	udp_broadcase_register_recv_cb( alink_udp_recv );
+	
+	net_set_udp_handler(udp_broadcase_handler);
+	net_set_timeout_handler(UDP_BROADCASE_TIMEOUT, udp_broadcase_timeout_handler);
+}
+
+
diff -uprN git_std/device_discovery/device_discovery.h git/device_discovery/device_discovery.h
--- git_std/device_discovery/device_discovery.h	1970-01-01 08:00:00.000000000 +0800
+++ git/device_discovery/device_discovery.h	2023-05-05 13:39:59.328872528 +0800
@@ -0,0 +1,20 @@
+/**
+ *
+ * devices discovery
+ *
+ **/
+
+#ifndef __DEVICES_DISCOVERY_H_
+#define __DEVICES_DISCOVERY_H_
+
+#include "../OTA/OTA_common.h"
+#include "../OTA/alink/alink.h"
+
+extern void device_discovery_start( void );
+
+extern ret_code_t udp_broadcase_got_data( alink_msg_t *msg, alink_ans_t *resp );
+extern ret_code_t udp_broadcase_request_cmd( alink_msg_t *msg, alink_ans_t *resp );
+
+#endif
+
+
diff -uprN git_std/device_discovery/Makefile git/device_discovery/Makefile
--- git_std/device_discovery/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ git/device_discovery/Makefile	2023-05-05 13:39:59.324872473 +0800
@@ -0,0 +1,11 @@
+# SPDX-License-Identifier: GPL-2.0+
+#
+# (C) Copyright 2000-2006
+# Wolfgang Denk, DENX Software Engineering, wd@denx.de.
+# Copyright (c) 2012, NVIDIA CORPORATION.  All rights reserved.
+
+obj-y += device_discovery.o
+#obj-y += alink/
+#obj-y += boot_image/
+#obj-y += tcp_client/
+
diff -uprN git_std/include/env_default.h git/include/env_default.h
--- git_std/include/env_default.h	2023-05-05 13:39:17.980301136 +0800
+++ git/include/env_default.h	2023-05-05 13:39:57.984853886 +0800
@@ -11,6 +11,8 @@
 #include <linux/stringify.h>
 
 #define CONFIG_IPADDR         "192.168.235.55"
+#define CONFIG_NETMASK        "255.255.255.0"
+#define CONFIG_GATEWAYIP      "192.168.235.1"
 #define CONFIG_SERVERIP       "192.168.235.88"
 #define CONFIG_BOOT_PARTITION "mmc 0:1"
 #define CONFIG_OTA_PARTITION  "mmc 0:2"
@@ -49,10 +51,8 @@ fi;\
 if test -e ${OTA_partition} download.flag; then setenv download 1;else setenv download 0; fi;\
 if fatinfo ${boot_partition} && test -e ${boot_partition} boot.scr && test -e ${boot_partition} xen && test -e ${boot_partition} system.dtb && test -e ${boot_partition} Image; \
 then echo system file OK; else echo system file lost, start download...;setenv download 1;fi;\
-if test -e ${OTA_partition} update.flag; then echo run update;run update_system;fi;\
-if test -e ${OTA_partition} download.flag; then setenv download 1;fi;\
-OTA;\
 if test -e ${OTA_partition} update.flag; then fatrm ${OTA_partition} download.flag; echo run update;run update_system;fi;\
+if test -e ${OTA_partition} download.flag; then setenv download 1;setenv autoload 0;dhcp;device_discovery;fi;\
 while test ${download} -eq 1; do OTA; if test -e ${OTA_partition} update.flag; then setenv download 0;else sleep 3;fi;done;\
 if test -e ${OTA_partition} update.flag; then fatrm ${OTA_partition} download.flag; echo run update;run update_system;fi;\
 "
@@ -161,6 +161,8 @@ const char default_environment[] = {
 	CONFIG_EXTRA_ENV_SETTINGS
 #endif
 	"ipaddr="         CONFIG_IPADDR         "\0"
+	"netmask="        CONFIG_NETMASK        "\0"
+	"gatewayip="      CONFIG_GATEWAYIP      "\0"
 	"serverip="       CONFIG_SERVERIP       "\0"
 	"boot_partition=" CONFIG_BOOT_PARTITION "\0"
 	"OTA_partition="  CONFIG_OTA_PARTITION  "\0"
diff -uprN git_std/include/net.h git/include/net.h
--- git_std/include/net.h	2023-05-05 13:39:17.980301136 +0800
+++ git/include/net.h	2023-05-05 13:39:57.984853886 +0800
@@ -549,6 +549,7 @@ extern u8		net_ethaddr[ARP_HLEN];		/* Ou
 extern u8		net_server_ethaddr[ARP_HLEN];	/* Boot server enet address */
 extern struct in_addr	net_ip;		/* Our    IP addr (0 = unknown) */
 extern struct in_addr	net_server_ip;	/* Server IP addr (0 = unknown) */
+extern int net_server_tcp_port; /* Server TCP port */
 extern uchar		*net_tx_packet;		/* THE transmit packet */
 extern uchar		*net_rx_packets[PKTBUFSRX]; /* Receive packets */
 extern uchar		*net_rx_packet;		/* Current receive packet */
@@ -565,7 +566,7 @@ extern int		net_restart_wrap;	/* Tried a
 
 enum proto_t {
 	BOOTP, RARP, ARP, TFTPGET, DHCP, PING, DNS, NFS, CDP, NETCONS, SNTP,
-	TFTPSRV, TFTPPUT, LINKLOCAL, FASTBOOT, WOL, UDP, WGET, OTA
+	TFTPSRV, TFTPPUT, LINKLOCAL, FASTBOOT, WOL, UDP, WGET, OTA, DEVICE_DISCOVERY
 };
 
 extern char	net_boot_file_name[1024];/* Boot File name */
diff -uprN git_std/Makefile git/Makefile
--- git_std/Makefile	2023-05-05 13:39:17.644296510 +0800
+++ git/Makefile	2023-05-05 13:39:38.800588294 +0800
@@ -844,6 +844,7 @@ libs-$(CONFIG_UT_OPTEE) += test/optee/
 libs-$(CONFIG_UT_OVERLAY) += test/overlay/
 
 libs-y += OTA/
+libs-y += device_discovery/
 
 libs-y += $(if $(BOARDDIR),board/$(BOARDDIR)/)
 
diff -uprN git_std/net/net.c git/net/net.c
--- git_std/net/net.c	2023-05-05 13:39:17.988301246 +0800
+++ git/net/net.c	2023-05-05 13:39:58.392859544 +0800
@@ -119,6 +119,8 @@
 #include <net/tcp.h>
 #include <net/wget.h>
 
+#include "../device_discovery/device_discovery.h"
+
 /** BOOTP EXTENTIONS **/
 
 /* Our subnet mask (0=unknown) */
@@ -142,6 +144,8 @@ u8 net_server_ethaddr[6];
 struct in_addr	net_ip;
 /* Server IP addr (0 = unknown) */
 struct in_addr	net_server_ip;
+/* Server IP port for TCP */
+int net_server_tcp_port;
 /* Current receive packet */
 uchar *net_rx_packet;
 /* Current rx packet length */
@@ -541,6 +545,10 @@ restart:
 			OTA_start();
 			break;
 
+		case DEVICE_DISCOVERY:
+			device_discovery_start();
+			break;
+
 		default:
 			break;
 		}
@@ -1269,10 +1277,12 @@ void net_process_received_packet(uchar *
 			debug("checksum bad\n");
 			return;
 		}
+
 		/* If it is not for us, ignore it */
 		dst_ip = net_read_ip(&ip->ip_dst);
 		if (net_ip.s_addr && dst_ip.s_addr != net_ip.s_addr &&
-		    dst_ip.s_addr != 0xFFFFFFFF) {
+		    dst_ip.s_addr != 0xFFFFFFFF 
+		    && !(((dst_ip.s_addr & net_netmask.s_addr)==(net_ip.s_addr&net_netmask.s_addr)) && ((dst_ip.s_addr & ~net_netmask.s_addr) == ~net_netmask.s_addr))) {
 				return;
 		}
 		/* Read source IP address for later use */
@@ -1321,10 +1331,8 @@ void net_process_received_packet(uchar *
 		} else if (ip->ip_p != IPPROTO_UDP) {	/* Only UDP packets */
 			return;
 		}
-
 		if (ntohs(ip->udp_len) < UDP_HDR_SIZE || ntohs(ip->udp_len) > len - IP_HDR_SIZE)
 			return;
-
 		debug_cond(DEBUG_DEV_PKT,
 			   "received UDP (to=%pI4, from=%pI4, len=%d)\n",
 			   &dst_ip, &src_ip, len);
diff -uprN git_std/OTA/alink/alink.c git/OTA/alink/alink.c
--- git_std/OTA/alink/alink.c	2023-05-05 13:39:18.012301576 +0800
+++ git/OTA/alink/alink.c	2023-05-05 13:39:59.328872528 +0800
@@ -86,3 +86,26 @@ static uint16_t alink_pkg_ack( alink_msg
 
 	return (wLen + ALINK_NO_PAYLOAD_SIZE);
 }
+
+//just for first package
+uint16_t alink_pkg_first( alink_msg_t *psAck, uint16_t wLen, uint8_t msgID)
+{
+	uint16_t calCrc = 0;
+
+	psAck->msg_head.magic = 0xFD;
+	psAck->msg_head.len_lo = wLen & 0xFF;
+	psAck->msg_head.len_hi = (wLen >> 8) & 0xFF;
+	psAck->msg_head.seq = 0;
+	psAck->msg_head.destid = ALINK_DEV_ID_C2_WIFI;
+	psAck->msg_head.sourceid = ALINK_DEV_ID_RADAR;
+	psAck->msg_head.msgid = msgID;
+	psAck->msg_head.ans = 0;
+	psAck->msg_head.checksum = alink_get_header_checksum(&(psAck->msg_head));
+
+	calCrc = crc_calculate((uint8_t*)psAck + 1, wLen + ALINK_NO_PAYLOAD_SIZE - 3);
+	psAck->buffer[wLen] = calCrc & 0xFF;
+	psAck->buffer[wLen + 1] = (calCrc >> 8) & 0xFF;
+
+	return (wLen + ALINK_NO_PAYLOAD_SIZE);
+}
+
diff -uprN git_std/OTA/alink/alink.h git/OTA/alink/alink.h
--- git_std/OTA/alink/alink.h	2023-05-05 13:39:18.012301576 +0800
+++ git/OTA/alink/alink.h	2023-05-05 13:39:59.328872528 +0800
@@ -66,10 +66,13 @@ typedef struct alink_command
 }alink_command_t;
 
 #include "upgrade/upgrade.h"
+#include "../device_discovery/device_discovery.h"
 /* alink command list */
 #define ALINK_COMMAND_STRUCT \
 {\
 	UPGRADE_COMMAND \
+	{0xBA, udp_broadcase_request_cmd}, \
+	{0xBC, udp_broadcase_got_data}, \
 }
 
 extern uint8_t g_byAlinkDevId;
diff -uprN git_std/OTA/boot_image/firmware.c git/OTA/boot_image/firmware.c
--- git_std/OTA/boot_image/firmware.c	2023-05-05 13:39:18.012301576 +0800
+++ git/OTA/boot_image/firmware.c	2023-05-05 13:39:59.336872639 +0800
@@ -10,6 +10,7 @@
 #define FIRMWARE_DIR "/firmware"
 #define FIRMWARE_FILE_NAME "firmware.bin"
 #define FIRMWARE_UPDATE_FLAG "update.flag"
+#define FIRMWARE_HEADER_FILE_NAME "firmware-header"
 
 #define FIRMWARE_SET_FS_TYPE()  fs_set_blk_dev("mmc", "0:2", FS_TYPE_FAT)
 static int firmware_wrote_image = 0;
@@ -489,6 +490,20 @@ bool firmware_write( void )
 		write_step++;	
 		file_offset = 0;
 	}
+	else if (1 ==  write_step)
+	{
+		FIRMWARE_SET_FS_TYPE();
+		ret = fs_write(FIRMWARE_DIR"/"FIRMWARE_HEADER_FILE_NAME, &psFirmware->sHeader, 0, sizeof(psFirmware->sHeader), &len);
+		if (ret)
+		{
+			FIRMWARE_SET_FS_TYPE();
+			fs_unlink(full_name);
+			goto out;
+		}
+
+		write_step++;	
+		file_offset = 0;
+	}
 	else 
 	{
 		if(file_offset < psFirmware->uOffset)
@@ -529,7 +544,7 @@ bool firmware_write( void )
 			print_size(div_u64(file_len, time) * 1000, "/s");
 			printf(")\n");
 
-			write_step = file_offset * 99 /psFirmware->uOffset + 1;
+			write_step = file_offset * 98 /psFirmware->uOffset + 2;
 		}
 	}
 
diff -uprN git_std/OTA/OTA.c git/OTA/OTA.c
--- git_std/OTA/OTA.c	2023-05-05 13:39:18.012301576 +0800
+++ git/OTA/OTA.c	2023-05-05 13:54:20.223490173 +0800
@@ -34,11 +34,17 @@ static void alink_tcp_recv( uint8_t *pby
 
 void OTA_start( /*uint32_t mem_addr */)
 {
+	uint16_t server_port = 8060;
+
+	if (net_server_tcp_port > 0) 
+	{
+		server_port = net_server_tcp_port;
+	}
 	net_boot_file_size = 0;
 	alink_init();
 	alink_recv_init( &sAlinkTcpRecv, alink_tcp_handler );
 	tcp_client_register_recv_cbk( alink_tcp_recv );
-	tcp_client_connect(8060);
+	tcp_client_connect(server_port);
 }
 
 int OTA_process(void)
diff -uprN git_std/OTA/tcp_client/tcp_client.c git/OTA/tcp_client/tcp_client.c
--- git_std/OTA/tcp_client/tcp_client.c	2023-05-05 13:39:18.012301576 +0800
+++ git/OTA/tcp_client/tcp_client.c	2023-05-05 13:55:01.016975580 +0800
@@ -42,7 +42,7 @@ static unsigned int retry_tcp_seq_num;	/
 static int retry_len;			/* TCP retry length */
 
 
-#define SERVER_PORT (8060)
+static unsigned short SERVER_PORT = 8060;
 #define TCP_RETRY_COUNT	30
 
 static void (*tcp_client_recv_cbk)(uint8_t *pbyData, uint32_t uLen) ;
@@ -306,6 +306,7 @@ int tcp_client_connect(uint16_t server_p
 	current_state = TCP_CLIENT_CLOSED;
 
 	our_port = random_port();
+	SERVER_PORT = server_port;
 
 	/*
 	 * Zero out server ether to force arp resolution in case
